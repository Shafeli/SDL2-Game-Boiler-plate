#include "GameState.h"
#include "memory"
#include "GameObject.h"
#include "ObjectFactory.h"


GameState::GameState(GameEngine::GameDataRef data)
	: m_data(data)
	, m_player(nullptr)
{
	m_factory = std::make_unique<ObjectFactory>(data);
}

//unloads data from the maps that are no longger in use
GameState::~GameState()
{


}

// loads texture to asset manager & sets textures plus builds first AI list & init UI
void GameState::Init()
{

}

// window closing
void GameState::HandleInput()
{

}

void GameState::Update(float dt)
{
	//End Game Check
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

	//Player Update calls
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

	//AI Update calls
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

	//Projectile Update calls
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

	//Collision Dection 
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

	// Projectile clearner calls
	////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////

}

//renders state 
void GameState::Draw()
{

}

//End game check
////////////////////////////////////////////////////////
void GameState::EndGameCheck()
{

}

//AI Update calls
////////////////////////////////////////////////////////
void GameState::AIUpdate(float dt)
{

}

//Projectile Update calls
////////////////////////////////////////////////////////
void GameState::ProjectileUpdate(float dt)
{

}

//Collision Dection
////////////////////////////////////////////////////////
void GameState::CollisionDetection()
{


}

// Projectile clearner calls
////////////////////////////////////////////////////////
void GameState::MarkedTargetCleanUp()
{
	//Marked target clean up calls 


}

void GameState::ProjectileCleanUp()
{
	//projectile cleaner calls

}

// Draw UI calls
////////////////////////////////////////////////////////
void GameState::DrawUI()
{
	//draws UI for game

}

//Player Update calls
////////////////////////////////////////////////////////
void GameState::PlayerUpdate(float dt)
{

}